-- Active: 1720142087700@@csc648database.cfgu0ky6ydzi.us-east-2.rds.amazonaws.com@3306@ScholarEats
USE ScholarEats;

-- Create roles table
CREATE TABLE roles (
    role_id INT AUTO_INCREMENT PRIMARY KEY,
    role_name VARCHAR(50) NOT NULL UNIQUE
);

-- Insert default roles
INSERT INTO roles (role_name) VALUES ('Student'), ('StoreManager'), ('Admin');

-- Create User table
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    uuid CHAR(36) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    username VARCHAR(255) NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    verification_status BOOLEAN NOT NULL,
    accessibility BOOLEAN NOT NULL,
    blacklist BOOLEAN NOT NULL,
    role_id INT NOT NULL DEFAULT 1,
    FOREIGN KEY (role_id) REFERENCES roles(role_id)
);

-- Create user_info table
CREATE TABLE user_info (
    user_info_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    profile_photo VARCHAR(255),
    bio TEXT,
    pronouns VARCHAR(50),
    allergies TEXT,
    dietary_restrictions TEXT,
    favorited_recipes TEXT,
    favorited_ingredients TEXT,
    university VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Create recipe table
CREATE TABLE recipes (
    recipe_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    recipe_name VARCHAR(255) NOT NULL,
    prep_time INT,
    cook_time INT,
    total_time INT,
    yield VARCHAR(50),
    directions TEXT,
    img_source VARCHAR(255),
    nutrition TEXT,
    servings INT,
    dietary_restrictions TEXT,
    calories INT,
    fat INT,
    protein INT,
    fiber INT,
    difficulty VARCHAR(50),
    cooking_tip TEXT,
    accessibility BOOLEAN NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Create user_recipes table
CREATE TABLE user_recipes (
    user_recipe_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    recipe_name VARCHAR(255) NOT NULL,
    prep_time INT,
    cook_time INT,
    total_time INT,
    yield VARCHAR(50),
    directions TEXT,
    img_source VARCHAR(255),
    nutrition TEXT,
    servings INT,
    dietary_restrictions TEXT,
    calories INT,
    fat INT,
    protein INT,
    fiber INT,
    difficulty VARCHAR(50),
    cooking_tip TEXT,
    accessibility BOOLEAN NOT NULL,
    is_approved BOOLEAN NOT NULL DEFAULT FALSE,
    admin_id INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (admin_id) REFERENCES admin(admin_id)
);

-- Create ingredient table
CREATE TABLE ingredient (
    ingredient_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

-- Create recipe_ingredient table
CREATE TABLE recipe_ingredient (
    recipe_id INT NOT NULL,
    ingredient_id INT NOT NULL,
    PRIMARY KEY (recipe_id, ingredient_id),
    FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id),
    FOREIGN KEY (ingredient_id) REFERENCES ingredient(ingredient_id)
);

-- Create store table
CREATE TABLE store (
    store_id INT AUTO_INCREMENT PRIMARY KEY,
    ingredient_id INT NOT NULL,
    user_id INT NOT NULL,
    quantity INT NOT NULL,
    expiration_date DATE,
    FOREIGN KEY (ingredient_id) REFERENCES ingredient(ingredient_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Create admin table
CREATE TABLE admin (
    admin_id INT AUTO_INCREMENT PRIMARY KEY,
    uuid CHAR(36) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    username VARCHAR(255) NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    verification_status BOOLEAN NOT NULL,
    accessibility BOOLEAN NOT NULL
);

-- Create university table
CREATE TABLE university (
    university_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email_suffix VARCHAR(255) NOT NULL
);

-- Create email_log table
CREATE TABLE email_log (
    email_log_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    email VARCHAR(255) NOT NULL,
    timestamp DATETIME NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Create manages table
CREATE TABLE manages (
    admin_id INT NOT NULL,
    user_id INT NOT NULL,
    PRIMARY KEY (admin_id, user_id),
    FOREIGN KEY (admin_id) REFERENCES admin(admin_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Create uses table
CREATE TABLE uses (
    user_id INT NOT NULL,
    recipe_id INT NOT NULL,
    PRIMARY KEY (user_id, recipe_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (recipe_id) REFERENCES recipes(recipe_id)
);

-- Create has table
CREATE TABLE has (
    user_id INT NOT NULL,
    university_id INT NOT NULL,
    PRIMARY KEY (user_id, university_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (university_id) REFERENCES university(university_id)
);

-- Create activity_log table
CREATE TABLE activity_log (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    action VARCHAR(255) NOT NULL,
    timestamp DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Create notifications table
CREATE TABLE notifications (
    notification_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    message TEXT NOT NULL,
    is_read BOOLEAN NOT NULL DEFAULT FALSE,
    timestamp DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Add indexes for optimization
CREATE INDEX idx_user_email ON users(email);
CREATE INDEX idx_user_username ON users(username);
CREATE INDEX idx_user_uuid ON users(uuid);

CREATE INDEX idx_admin_email ON admin(email);
CREATE INDEX idx_admin_username ON admin(username);
CREATE INDEX idx_admin_uuid ON admin(uuid);
